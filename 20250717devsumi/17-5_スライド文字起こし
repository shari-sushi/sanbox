スライド16：as-isとto-beを言語化

as-isを分析しモデリングし、それを元にステークホルダーと対話
対話の中からto-beに成る情報を集める
発散と収束を繰り返す
モデルは対話のブレを抑える
今の話はこのモデルのここのことですよね

as-isとto-beをまとめた後、
to-beを実現するとどうなるのか
期待値を言語化しておく
この期待値が指標につながる
定性的か定量的かは気にしない

購入に集中しているコミュニケーションが減る
コミュニケーションが減るとは

サービス開始時のコミュニケーション
障害発生時のコミュニケーション
支払い方法追加時のコミュニケーション


新しい価値を追加する、既にある価値を高める、に時間を使える


計測のタイミングを見定める

最初から拘り過ぎず機会を伺い、常に狙う



- 課題と打ち手
  課題は山程でてくる（粒度も様々）
  すべての課題を一気に解決できないので、段階的に解決していく戦略が必要
  戦略の立案に[エビデンスベースドマネジメント（EBM）](https://www.servantworks.co.jp/resources/translated/evidence-based-management-guide-japanese/)を使う
- ゴールは３つ
  - 戦略的ゴール
    - to-beを実現するために達成したい事柄を出す
    - 何をしたらto-beを実現したと言えるかを問う
    - 遠いところから手前にブレークダウンするも良し
    - 手前から積み上げて遠くを見るも良し
- 中間ゴール
  - 今期が終わったときにどういう状態になっていたいかを構想する
  - 前後期に分けて考えてもいい
  - ゴールを達成したと言えるに必要な指標を出す
  - 定性的、定量的、充分、不充分は、いったん置いておく
  - 指標は後から足してもいい
- 即時戦術ゴール
  - 何を達成したいかチームで合意して目指していく
  - 完了条件を計測
  - スプリントレビュー、スプリントレトロスペクティブで検査
  - 次のスプリントで適応

- 得たい価値は何か？
  - 重要価値領域を参考にする
  - 技術的負債の返済は、市場価値を高めない
  - 組織的な能力の向上が得たい
  - このことを確認しながら各ゴールに向かえているか経験的に進んでいく

スライド25：戦略的ゴール

システムのモダナイゼーション

依存関係の整理

最も複雑な購入ドメインから構造を再構成
購入ドメインからの影響を他のドメインに波及し全体を最適化


障害に対する耐性の向上

障害を前提とした設計
状態の整合性を自動で回復する仕組みを構築




運用体制の強化

サービスレベル目標（SLO）に準拠した運用
エラーバジェットアラートに基づいた障害対応
オブザーバビリティを獲得しトレース可能な状態を構築
Four Keysに基づく改善サイクル



スライド26：中間ゴール - 2025年度

上期

購入システムの一部をモダン化し、テスト運用

最小のユースケースを対象




下期

モダン化した購入システムをテスト運用から本格運用へ

ユースケースの拡充
対象ユーザーの拡大
組織の拡大





スライド27：既存システムの一部をモダン化

ストラングラーフィグパターンを参考に置き換える
(１つずつレガシーをモダンに置き換えていき、最終的に全てモダンになっている)
なぜこのパターンを参考とするか
Architecture Decision Record (ADR) に書いて合意形成
コンポーネント図で切り替えステップを可視化

ステップ1: Facadeレイヤーの構築
ステップ2: モダンシステムを鍛える
ステップ3: モダンシステムとレガシーシステムの辻褄を合わせる（CQRS）
ステップ4: カナリアリリースで段階的に移行


現在、ステップ3を絶賛開発中

Claude Code等のAIエージェントがアウトプットを爆速加速


スライド28：TemporalとCQRS&ES

購入ドメインには、受注処理がある
受注処理は、各処理工程の成功と失敗がある
それらの実行状況の管理、工程の組換え、途中からの再開がある
状態遷移を定義し、予期せぬ割り込みを防ぎ、着実に実行する
Actorモデルが適切だがオーバーエンジニアリング
TemporalとCQRS & Event Sourcingを組み合わせる
https://temporal.io/


- 入社3か月は1人で、3か月でチーム募集
  1人とはいっても、協力者は多かった。　(巻き込み力だ)

スライド29：（システム構成図）
（複雑なシステム構成図が表示されているが、詳細なコンポーネント名は読み取り困難）
スライド30：ここまでひとり

後付けで濃い内容にしているものの大枠についてはひとりで推進

もちろん、たくさんの方々にご協力をいただいている
壁打ち、情報収集、意見交換、フィードバックなどなど


入社から3ヶ月で立案
2025年01月からチームを立ち上げるべく人員の募集
既存チームの横に小さなチームを立ち上げる

スライド31：2-4名のチーム
// two pizza team ? 少数の方が意思伝達が良好。チームは凸凹が組み合わさるのが大事

two pizza teamより小さいチーム
トライ＆エラーのサイクルを早めたい
意思伝達のパスを限りなく少なくしたい
キレイなチームにしない
時にはマイクロマネジメントを辞さない
必要ならいつでもオーナーシップ、リーダーシップを奪ってもらう

スライド32：叩き台を作る
//  小チームでたたき台を作る。理論だけでもdocsだけでもだめ。動くものを作ることで認識を共有できる。技術的な単語多かった。
//  レイヤー腐敗防止

デファクトとなるモジュールを小さなチームで立ち上げる
構造的に堅牢な作りを整える

レイヤ化アーキテクチャ
契約プログラミング
SOLID原則
Tell dont ask
EventSourcing
ドメイン駆動設計
腐敗防止層


スライド33：みんなで育てる
// 今後の話。　Enabling Team で、オーバーエンジニアリングになっていないか確認。運用できるのか？
// ダイナミックりチーミング　最近出た本。考えさせられたらしい。
// AIがバディ化したことで、個人個人が凸凹より丸っぽくなった。丸っぽい人たちの組み合わせになったのがどうなるのか今後評価していきたいという個人的な感想

チームトポロジーとSECIモデルを組み合わせる

Enabling Teamで共通体験を得て、共同化
Stream Aligned Teamに入り体験を、表出化
チーム内の体験と組み合わせて、連結化
体験を横断的展開ができるよう、内面化


ダイナミックリチーミングにトライする

我々がどういった自由を求めるか言語化する
生成AIの発展により、バディをAIに求めて、より柔軟なチーム構造を模索



スライド34：まとめ

表面的な混沌さに惑わされず、構造に着目しよう
C4モデルとEBMは、共通認識を得るのに使う
ストラングラーフィグパターンとCQRSで段階的にモダン化
ひとり→2-4名の小チーム→チームトポロジーとSECIモデル段階的にモダン化
障害耐性↑・リードタイム↓・組織学習↑で"創る時間"を取り戻す

「小さく切って、測って学び、大きく広げる」