# 「バグに気づけるなら直せばいいじゃない」ーーQAエンジニアがAIで開発エンジニア化した話

## ソフトウェア品質を確保するためのアプローチ
- 開発とQAを分業並列にすることで、バグの早期発見
- 開発の本音とQAの本音はぶつかる
  納期が近い：優先度の低いテストを省略 vs 不完全なリリースは信頼を失う
  両社共に、QA側で気付いたバグはQA側で直せたら良いのにと思うことがある。
  ex) 「YY/MM/DD」が「DD/MM/YY」になってるという指摘。答えまでQAが分かってる。わざわざチケットにして開発工程に入れなくても…

## 改善案
- QAエンジニアがAIを使って修正できれば、品質向上と効率化するかも？
- 手段：AI開発駆動　RooCode(モード３種：質、設計、実装)、Claude

##
従来
- 1日~3日　QAがバグ発見→QAがissue作成→開発が工程に盛り込む→開発が修正
- 10分~30分 QAがバグ発見→QAがissue作成→開発が工程に盛り込む→開発が修正
- 効果測定 50%以上向上(何が？)、ai費用が21万円/3人月
## 重要なポイント
- AIのドキュメントレビューを実装前に
- AIの方向性に迷いが出たら、やり直す。勇気を持つ
- AIの知っている情報に委ねる？　ハルシネーション
- × AIが書いたコード、〇自分が採用したコード
  // 結構いたらしい。　本当にいるんだ…。もしそうだとしても本番のコードでは言えないでしょ。

## 成果
- エラーメッセージやバリデーション等をテストの視点から
  成功要因：開発の基礎知識　テスト技法
- UIの使いにくさの改善
  成功要因：webアプリのUI/UX あいまいな仕様を明文化する癖がある
- 外部ファイル取り込み機能
  コンフリクトに気づかず数日使った。gitの操作がうんぬん。// 新人だからではなくQAの領域から外れてただけでは…？

## 新構造
- 開発チーム：新機能、大希望、複雑な新機能
- 旧QAエンジニア：軽微な修正改善

## まとめ
- 成果：早期修正、QAエンジニアの視点での気づきを反映できる、QAエンジニアは仕様を把握している？
- 課題：AIの限界、開発知識のボトルネック、アーキテクチャ理解の差
- 垣根をあいまいにする

// ITエンジニアの「ボトルネック」って使い方辺じゃね？抽象度高くし過ぎて勝手に広義を生み出してる気がする

入社祝い金100万円！？